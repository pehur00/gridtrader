import React, { useState } from 'react';
import { OptimizationInput } from './OptimizationInput';
import type { OptimizationInputData } from './OptimizationInput';
import { OptimizedGridDisplay } from './OptimizedGridDisplay';
import { optimizeCompleteGridSetup } from '../utils/completeGridOptimizer';
import type { OptimizedGridSetup } from '../utils/completeGridOptimizer';
import { useMarketData } from '../hooks/useMarketData';

interface AIGridOptimizerProps {
  symbol?: string;
  onSetupComplete?: (setup: OptimizedGridSetup) => void;
}

export const AIGridOptimizer: React.FC<AIGridOptimizerProps> = ({
  symbol: initialSymbol = 'BTCUSDT',
  onSetupComplete
}) => {
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizedSetup, setOptimizedSetup] = useState<OptimizedGridSetup | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  const { currentPrice, historicalData } = useMarketData(initialSymbol);

  const handleOptimize = async (input: OptimizationInputData) => {
    setIsOptimizing(true);
    setError(null);

    try {
      // Call the optimizer (historicalData is already in the correct format)
      const setup = await optimizeCompleteGridSetup({
        symbol: input.symbol,
        investmentAmount: input.investmentAmount,
        riskTolerance: input.riskTolerance,
        timeHorizon: input.timeHorizon,
        currentPrice: input.currentPrice || currentPrice,
        historicalData: historicalData
      });

      setOptimizedSetup(setup);
      
      if (onSetupComplete) {
        onSetupComplete(setup);
      }
    } catch (err) {
      console.error('Optimization error:', err);
      setError(err instanceof Error ? err.message : 'Failed to optimize grid setup');
    } finally {
      setIsOptimizing(false);
    }
  };

  const handleCopySetup = () => {
    if (!optimizedSetup) return;

    const setupText = `
Grid Trading Setup - ${optimizedSetup.metadata.symbol}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Price Range: $${optimizedSetup.gridParameters.lowerPrice} - $${optimizedSetup.gridParameters.upperPrice}
Grid Levels: ${optimizedSetup.gridParameters.gridLevels}
Grid Spacing: ${optimizedSetup.gridParameters.spacingPercent}%
Capital per Grid: $${optimizedSetup.gridParameters.capitalPerGrid}
Leverage: ${optimizedSetup.gridParameters.recommendedLeverage}x
Effective Capital: $${optimizedSetup.gridParameters.effectiveCapital}

Expected Performance (${optimizedSetup.metadata.timeHorizon} days)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Expected APR: ${optimizedSetup.expectedPerformance.expectedAPR}%
Expected Profit: $${optimizedSetup.expectedPerformance.expectedProfit}
Success Probability: ${(optimizedSetup.expectedPerformance.successProbability * 100).toFixed(0)}%
Max Drawdown: ${optimizedSetup.expectedPerformance.maxDrawdown}%
Risk Score: ${optimizedSetup.expectedPerformance.riskScore}/10

AI Insights
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Market Regime: ${optimizedSetup.aiInsights.marketRegime}
Volatility: ${(optimizedSetup.aiInsights.volatility * 100).toFixed(2)}%
Trend: ${optimizedSetup.aiInsights.trendPrediction}
Recommendation: ${optimizedSetup.aiInsights.recommendation}

Generated by GridTrader AI
${optimizedSetup.metadata.optimizedAt}
    `.trim();

    navigator.clipboard.writeText(setupText).then(() => {
      alert('Setup copied to clipboard!');
    }).catch((err) => {
      console.error('Failed to copy:', err);
      alert('Failed to copy to clipboard');
    });
  };

  const handleDeployToBroker = () => {
    // TODO: Implement broker deployment
    alert('Broker deployment coming soon! This will connect to your exchange via API and deploy the grid automatically.');
  };

  const handleViewBacktest = () => {
    // TODO: Implement backtest view
    alert('Backtesting coming soon! This will show historical performance of this exact setup.');
  };

  const handleReset = () => {
    setOptimizedSetup(null);
    setError(null);
  };

  return (
    <div className="space-y-4">
      {/* Error Display */}
      {error && (
        <div className="bg-red-900/30 border border-red-700 rounded-lg p-3">
          <div className="flex items-start space-x-2">
            <svg className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
            <div>
              <div className="text-sm font-semibold text-red-400">Optimization Failed</div>
              <div className="text-xs text-red-300 mt-1">{error}</div>
            </div>
          </div>
        </div>
      )}

      {/* Input Form */}
      {!optimizedSetup && (
        <OptimizationInput
          currentPrice={currentPrice}
          onOptimize={handleOptimize}
          isLoading={isOptimizing}
        />
      )}

      {/* Optimized Results */}
      {optimizedSetup && (
        <div className="space-y-2">
          <button
            onClick={handleReset}
            className="w-full py-2 bg-gray-700 hover:bg-gray-600 text-white text-xs font-semibold rounded transition-all"
          >
            ← BACK TO OPTIMIZER
          </button>
          
          <OptimizedGridDisplay
            setup={optimizedSetup}
            onCopySetup={handleCopySetup}
            onDeployToBroker={handleDeployToBroker}
            onViewBacktest={handleViewBacktest}
          />
        </div>
      )}

      {/* Loading State */}
      {isOptimizing && (
        <div className="bg-gray-900 rounded-lg p-8 text-center">
          <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <div className="text-white font-semibold mb-2">Analyzing Market Data...</div>
          <div className="text-gray-400 text-sm">
            AI is analyzing historical patterns and calculating optimal grid parameters
          </div>
        </div>
      )}
    </div>
  );
};
